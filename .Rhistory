c <- 2
c
c
c<-2
c
c<- 2:6
c
c
c<- as.date('2015-10-26')
c
c<- as.date("2015-10-26")
c
c<- as.Date("2015-10-26")
c
c<- as.Date("2015-10-26") : as.Date("2015-10-28")
c
c<- c(as.Date("2015-10-26") : as.Date("2015-10-28"))
c
c<- c(as.Date("2015-10-26") : as.Date("2015-10-28"))
c
class(c)
c<- c(as.Date("2015-10-26") : as.Date("2015-10-28"))
c
class(c)
d<- as.Date("2015-10-26")
class(d)
c<- c(as.Date("2015-10-26") : as.Date("2015-10-28"))
c
class(c)
d<- c(as.Date("2015-10-26"), as.Date("2015-10-27") as.Date("2015-10-28"))
class(d)
c<- c(as.Date("2015-10-26") : as.Date("2015-10-28"))
c
class(c)
d<- c(as.Date("2015-10-26"), as.Date("2015-10-27"), as.Date("2015-10-28"))
class(d)
c<- c(as.Date("2015-10-26") : as.Date("2015-10-28"))
c
class(c)
d<- c(as.Date("2015-10-26"), as.Date("2015-10-27"), as.Date("2015-10-28"))
class(d)
m = as.Date(c)
c<- c(as.Date("2015-10-26") : as.Date("2015-10-28"))
c
class(c)
d<- c(as.Date("2015-10-26"), as.Date("2015-10-27"), as.Date("2015-10-28"))
class(d)
m = as.Date(c(1))
m
c<- c(as.Date("2015-10-26") : as.Date("2015-10-28"))
c
class(c)
d<- c(as.Date("2015-10-26"), as.Date("2015-10-27"), as.Date("2015-10-28"))
class(d)
m <- as.Date(c(1))
m
c<- c(as.Date("2015-10-26") : as.Date("2015-10-28"))
c
class(c)
d<- c(as.Date("2015-10-26"), as.Date("2015-10-27"), as.Date("2015-10-28"))
class(d)
m <- as.Date(c[1])
m
c<- c(as.Date("2015-10-26") : as.Date("2015-10-28"))
c
class(c)
d<- c(as.Date("2015-10-26"), as.Date("2015-10-27"), as.Date("2015-10-28"))
class(d)
m <- as.Date(40812)
m
# uses origin = "1970-01-01"
as.Date(0)
<- c(as.Date("2015-10-26") : as.Date("2015-10-28"))
c
class(c)
d<- c(as.Date("2015-10-26"), as.Date("2015-10-27"), as.Date("2015-10-28"))
class(d)
# uses origin = "1970-01-01"
as.Date(0)
<- c(as.Date("2015-10-26") : as.Date("2015-10-28"))
c
class(c)
d<- c(as.Date("2015-10-26"), as.Date("2015-10-27"), as.Date("2015-10-28"))
class(d)
m <- as.Date(40812)
uses origin = "1970-01-01"
as.Date(0)
origin = "1970-01-01"
as.Date(0)
origin = "1970-01-01"
<- c(as.Date("2015-10-26") : as.Date("2015-10-28"))
c
class(c)
d<- c(as.Date("2015-10-26"), as.Date("2015-10-27"), as.Date("2015-10-28"))
class(d)
m <- as.Date(40812)
origin = "1970-01-01" as.Date(0)
<- c(as.Date("2015-10-26") : as.Date("2015-10-28"))
c
class(c)
d<- c(as.Date("2015-10-26"), as.Date("2015-10-27"), as.Date("2015-10-28"))
class(d)
m <- as.Date(c,origin = "1970-01-01")
<- c(as.Date("2015-10-26") : as.Date("2015-10-28"))
c
class(c)
d<- c(as.Date("2015-10-26"), as.Date("2015-10-27"), as.Date("2015-10-28"))
class(d)
m <- as.Date(c,origin = "1970-01-01")
m
origin = "1970-01-01"
c<- c(as.Date("2015-10-26") : as.Date("2015-10-28"))
c
class(c)
d<- c(as.Date("2015-10-26"), as.Date("2015-10-27"), as.Date("2015-10-28"))
class(d)
m <- as.Date(c,origin)
m
origin = "1970-01-01"
start <- as.Date("2015-10-26")
end <- start + 4
c<- c(start: end)
c
class(c)
d<- c(as.Date("2015-10-26"), as.Date("2015-10-27"), as.Date("2015-10-28"))
class(d)
m <- as.Date(c,origin)
m
?gbm
?rnorm
?gbm
?pamr
?shiny
?knitr
x <- list (c("a","b"), 4, c(T,F,F))
x <- list (c("a","b"), 4, c(T,F,F))
x
windows()
windows()
windows()
library(lattice)
state = data.frame(state.x77, region = state.region)
xyplot(Life.Exp ~ Income | region, data = state, layout = c(1,4))
str(xyplot)
windows()
library(lattice)
state = data.frame(state.x77, region = state.region)
xyplot(Life.Exp ~ Income | region, data = state, layout = c(1,4))
str(xyplot)
windows()
dev.cur()
dev.set(2)
library(lattice)
state = data.frame(state.x77, region = state.region)
xyplot(Life.Exp ~ Income | region, data = state, layout = c(1,4))
str(xyplot)
library(lattice)
state = data.frame(state.x77, region = state.region)
xyplot(Life.Exp ~ Income | region, data = state, layout = c(1,4))
dev.set(3)
library(lattice)
state = data.frame(state.x77, region = state.region)
xyplot(Life.Exp ~ Income | region, data = state, layout = c(1,4))
#### set work directory ####
#setwd("C:/Users/clement.liu/Desktop/DV Project/forecasting-value")
setwd("C:/Users/User/Desktop/DV")
rm(list=ls())
#### code ####
library(lattice)
library(datasets)
library(moments)
source("constantness.R")
#### Reading the data ####
raw_data = read.csv("dv test.csv", header = TRUE)
#### create control variables ####
const_para = list()
# if target table is not specified, it will loop through all the tables
target_table = ""
#NYMEX_OPTIONS
#WSI_WC_ISO_AGGR_WIND_FORE
# setting the rolling back date period, 0 means all the days
days_back = 360
if (target_table != "") {
#### working on a single table ####
x = raw_data$TABLE_NAME == target_table
target_data = raw_data[x,]
good_date = as.Date(target_data$DATE_COL,format = "%m/%d/%Y")
if (days_back > 0)
{
date = tail(good_date, days_back)
daily_count = tail(target_data$RESULT_SET, days_back)
} else
{
date = good_date
daily_count = target_data$RESULT_SET
}
input_list = list(date, daily_count)
names(input_list) = c("date", "daily_count")
# Analysis #
# identify whether a table displays constant row count pattern #
const_para = constantness(input_list, hist_scat = TRUE, interval_plot = FALSE,show_stat = TRUE)
const_para = list(const_para)
names(const_para) = target_table
# ploting graphs for daily row count #
# plotting count vs time
windows()
plot(date, daily_count, col = "blue", pch = 20, main = "Daily Count")
# plotting linear line
fit = lm(daily_count ~ date)
abline(fit, col = "red")
# boxplot and histogram
windows()
par(mfrow = c(2,1))
boxplot(daily_count, main = "Daily Count")
hist(
daily_count, main = "", fre = FALSE, col = "grey", lwd = 2, ylim = c(0,max(density(daily_count)$y))
)
lines(
density(daily_count), main = "Daily Count", col = "blue", lwd = 2
)
} else {
#### working on all tables ####
j = 1
for (i in levels(raw_data$TABLE_NAME)) {
x = raw_data$TABLE_NAME == i
target_data = raw_data[x,]
good_date = as.Date(target_data$DATE_COL,format = "%m/%d/%Y")
if (days_back > 0)
{
date = tail(good_date, days_back)
daily_count = tail(target_data$RESULT_SET, days_back)
} else
{
date = good_date
daily_count = target_data$RESULT_SET
}
input_list = list(date, daily_count)
names(input_list) = c("date", "daily_count")
# Analysis #
# identify whether a table displays constant row count pattern #
const_para[[j]] = constantness(input_list)
names(const_para)[j] = i
j = j + 1
#           windows()
#           plot(date, daily_count, col = "blue", pch = 20, main = i)
}
}
const_para
#### set work directory ####
#setwd("C:/Users/clement.liu/Desktop/DV Project/forecasting-value")
setwd("C:/Users/User/Desktop/DV")
rm(list=ls())
#### code ####
library(lattice)
library(datasets)
library(moments)
source("constantness.R")
#### Reading the data ####
raw_data = read.csv("dv test.csv", header = TRUE)
#### create control variables ####
const_para = list()
# if target table is not specified, it will loop through all the tables
target_table = ""
#NYMEX_OPTIONS
#WSI_WC_ISO_AGGR_WIND_FORE
# setting the rolling back date period, 0 means all the days
days_back = 360
if (target_table != "") {
#### working on a single table ####
x = raw_data$TABLE_NAME == target_table
target_data = raw_data[x,]
good_date = as.Date(target_data$DATE_COL,format = "%m/%d/%Y")
if (days_back > 0)
{
date = tail(good_date, days_back)
daily_count = tail(target_data$RESULT_SET, days_back)
} else
{
date = good_date
daily_count = target_data$RESULT_SET
}
input_list = list(date, daily_count)
names(input_list) = c("date", "daily_count")
# Analysis #
# identify whether a table displays constant row count pattern #
const_para = constantness(input_list, hist_scat = TRUE, interval_plot = FALSE,show_stat = TRUE)
const_para = list(const_para)
names(const_para) = target_table
# ploting graphs for daily row count #
# plotting count vs time
windows()
plot(date, daily_count, col = "blue", pch = 20, main = "Daily Count")
# plotting linear line
fit = lm(daily_count ~ date)
abline(fit, col = "red")
# boxplot and histogram
windows()
par(mfrow = c(2,1))
boxplot(daily_count, main = "Daily Count")
hist(
daily_count, main = "", fre = FALSE, col = "grey", lwd = 2, ylim = c(0,max(density(daily_count)$y))
)
lines(
density(daily_count), main = "Daily Count", col = "blue", lwd = 2
)
} else {
#### working on all tables ####
j = 1
for (i in levels(raw_data$TABLE_NAME)) {
x = raw_data$TABLE_NAME == i
target_data = raw_data[x,]
good_date = as.Date(target_data$DATE_COL,format = "%m/%d/%Y")
if (days_back > 0)
{
date = tail(good_date, days_back)
daily_count = tail(target_data$RESULT_SET, days_back)
} else
{
date = good_date
daily_count = target_data$RESULT_SET
}
input_list = list(date, daily_count)
names(input_list) = c("date", "daily_count")
# Analysis #
# identify whether a table displays constant row count pattern #
const_para[[j]] = constantness(input_list)
names(const_para)[j] = i
j = j + 1
#           windows()
#           plot(date, daily_count, col = "blue", pch = 20, main = i)
}
}
const_para
#### set work directory ####
#etwd("C:/Users/clement.liu/Desktop/DV Project/forecasting-value")
setwd("C:/Users/User/Desktop/DV")
rm(list=ls())
#### code ####
library(lattice)
library(datasets)
library(moments)
source("constantness.R")
#### Reading the data ####
raw_data = read.csv("dv test.csv", header = TRUE)
#### create control variables ####
const_para = list()
# if target table is not specified, it will loop through all the tables
target_table = ""
#NYMEX_OPTIONS
#WSI_WC_ISO_AGGR_WIND_FORE
# setting the rolling back date period, 0 means all the days
days_back = 360
if (target_table != "") {
#### working on a single table ####
x = raw_data$TABLE_NAME == target_table
target_data = raw_data[x,]
good_date = as.Date(target_data$DATE_COL,format = "%m/%d/%Y")
if (days_back > 0)
{
date = tail(good_date, days_back)
daily_count = tail(target_data$RESULT_SET, days_back)
} else
{
date = good_date
daily_count = target_data$RESULT_SET
}
input_list = list(date, daily_count)
names(input_list) = c("date", "daily_count")
# Analysis #
# identify whether a table displays constant row count pattern #
const_para = constantness(input_list, hist_scat = TRUE, interval_plot = FALSE,show_stat = TRUE)
const_para = list(const_para)
names(const_para) = target_table
# ploting graphs for daily row count #
# plotting count vs time
windows()
plot(date, daily_count, col = "blue", pch = 20, main = "Daily Count")
# plotting linear line
fit = lm(daily_count ~ date)
abline(fit, col = "red")
abline(h = const_para[[1]][["expected constant value"]], col = "green")
# boxplot and histogram
windows()
par(mfrow = c(2,1))
boxplot(daily_count, main = "Daily Count")
hist(
daily_count, main = "", fre = FALSE, col = "grey", lwd = 2, ylim = c(0,max(density(daily_count)$y))
)
lines(
density(daily_count), main = "Daily Count", col = "blue", lwd = 2
)
} else {
#### working on all tables ####
j = 1
for (i in levels(raw_data$TABLE_NAME)) {
x = raw_data$TABLE_NAME == i
target_data = raw_data[x,]
good_date = as.Date(target_data$DATE_COL,format = "%m/%d/%Y")
if (days_back > 0)
{
date = tail(good_date, days_back)
daily_count = tail(target_data$RESULT_SET, days_back)
} else
{
date = good_date
daily_count = target_data$RESULT_SET
}
input_list = list(date, daily_count)
names(input_list) = c("date", "daily_count")
# Analysis #
# identify whether a table displays constant row count pattern #
const_para[[j]] = constantness(input_list)
names(const_para)[j] = i
j = j + 1
windows()
plot(date, daily_count, col = "blue", pch = 20, main = i)
abline(h = const_para[[i]][["expected constant value"]], col = "green")
}
}
const_para[[1]][["expected constant value"]]
